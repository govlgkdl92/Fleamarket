<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="memberSQL" >

<!-- ▶ 시큐리티: 권한 가져오기  -->
 	<select id="getAuth" parameterType="String" resultType="String">
 		select authority from members where mem_id = #{mem_id}
 	</select>


<!-- ========================================================================= --> 		
<!-- ▶  회원가입 -->
 	<insert id="join" parameterType="member">
 		begin
	 		insert into members values(#{mem_id}, #{mem_pwd}, #{mem_name}, #{mem_email}, 
	 									#{mem_add1},#{mem_add2}, #{mem_postcode},
	 									#{mem_tel}, '최근 거래지역이 없습니다', sysdate,
	 									1, 'ROLE_USER',
	 									0, #{mem_agree}, 0);

 			insert into store(mem_id, store_nickname, store_img) 
			values(#{mem_id}, '상점'||seq_store.NEXTVAL||'호', 'logo_black.png');
 		end;
 	</insert> 
<!-- ▶ 아이디 중복 체크 / 회원정보수정용 회원 데이터 전체 출력  -->
 	<select id="getData" parameterType="String" resultType="member">
 		select * from members where mem_id = #{mem_id}
 	</select>
 	
<!-- ========================================================================= -->
<!-- ▶  로그인 / 본인 재확인-->
 	<select id="login" parameterType="java.util.Map" resultType="member">
 		select * from members where mem_id = #{mem_id} and mem_pwd = #{mem_pwd}
 	</select>
<!-- ▶ 아이디찾기-->
 	<select id="findId" parameterType="String" resultType="member">
 		select * from members where mem_email = #{mem_email}
 	</select>
<!-- ▶ 비밀번호찾기-->
 	<select id="findPwd" parameterType="java.util.Map" resultType="member">
 		select * from members where mem_id = #{mem_id} and mem_email = #{mem_email}
 	</select>
<!-- ▶  비밀번호 재설정 -->
 	<update id="resetPwd" parameterType="java.util.Map" >
 		update members set mem_pwd = #{mem_pwd} where mem_email = #{mem_email}
 	</update>
 	

<!-- ========================================================================= -->
<!-- ▶ 카카오 로그인 -->
 	<select id="checkEmail" parameterType="String" resultType="member">
 		select * from members where mem_email = #{email}
 	</select>
<!-- ▶ 처음 로그인한 카카오 데이터 회원가입 -->
 	<insert id="joinKakao" parameterType="member">
 		begin
	 		insert into members values(#{mem_id}, #{mem_pwd}, #{mem_name}, #{mem_email}, 
	 									#{mem_add1},#{mem_add2}, #{mem_postcode},
	 									#{mem_tel}, '최근 거래지역이 없습니다', sysdate,
	 									1, 'ROLE_USER',
	 									1, #{mem_agree}, 0);
 			
 			insert into store(mem_id, store_nickname, store_img) 
			values(#{mem_id}, '상점'||seq_store.NEXTVAL||'호', 'logo_black.png');
 		end; 									
 	</insert> 
<!-- ▶ 카카오 데이터의 유니크 값 email가져오기 -->
 	<select id="selectKakao" parameterType="java.util.Map" resultType="member">
 		select * from members where mem_email = #{email}
 	</select>


<!-- ========================================================================= -->
<!-- ▶  수정 데이터로 업데이트 -->
 	<update id="update" parameterType="member" >
 		update members set mem_name = #{mem_name}
	 						, mem_pwd = #{mem_pwd}
	 						, mem_email = #{mem_email}
	 						, mem_tel = #{mem_tel}
	 						, mem_postcode = #{mem_postcode}
	 						, mem_add1 = #{mem_add1}
	 						, mem_add2 = #{mem_add2}
 		where mem_id = #{mem_id}
 	</update>
<!-- ▶  탈퇴 -->
 	<delete id="withdraw" parameterType="java.util.Map">
 		begin
<!-- 	 	1. 탈퇴 db에 사유 추가 -->
 			insert into withdraw values
 						(#{mem_id}, withdraw_seq.nextval
 						,#{withdraw_lowFrequency}, #{withdraw_rejoin}
 						,#{withdraw_lowContents}, #{withdraw_protectInfo}
 						,#{withdraw_lowBenefit}, #{withdraw_others}
 						,#{withdraw_detailReason}, sysdate );
<!--  		2. members에 아이디 제외 데이터 삭제 -->
			UPDATE members SET 
						mem_postcode = 0
						, mem_name='out' 
						, mem_pwd=#{mem_pwd}
						, mem_email=#{mem_email}
						, mem_add1='out' 
						, mem_add2='out'
						, mem_tel='out' 
						, mem_location='out' 
						, mem_agree ='out' 
				WHERE mem_id = #{mem_id};
 		end;
 	</delete>
 	
<!--  	카카오로그인/일반로그인 구분 -->
 	<select id="distinguishKakao" parameterType="String" resultType="Integer">
 		select mem_kakao from members where mem_id = #{mem_id}
 	</select>
 	
 	
<!--  	신고하기  .. 채팅 생기면 전면수정해야함-->
	<insert id="complain" parameterType="java.util.Map">
		begin
			insert into complain values(#{mem_id}, #{reporter_id}
										,complain_seq.nextval
										, #{complain_category}
										, #{product_seq}
										, #{board_seq}
										, #{review_seq}
										, #{comment_seq}
										, #{complain_content}
										, sysdate
										, #{store_seq}
										, 0
 									);
			update members SET mem_complain = (mem_complain+1) where mem_id = #{mem_id};
		end;
	</insert>
 	
</mapper>
