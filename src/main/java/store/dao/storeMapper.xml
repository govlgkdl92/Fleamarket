<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="storeSQL">
	<!-- [상점 정보] -->
   	<!-- 회원정보얻기/닉넴 유효성 검사 -->
  	<select id="getMember" parameterType="String" resultType="store"> 
 	    select * 
 	    from store 
 	    where store_nickname = #{nickname}
 	</select>
 	
 	<!-- 닉네임 수정 -->
 	<update id="nicknameUpdate" parameterType="java.util.Map">
 		update store 
 		set store_nickname = #{nickname} 
 		where mem_id = #{mem_id}
 	</update>
 	
 	<!-- 상점 소개글 업뎃 -->
   	<update id="introUpdate" parameterType="java.util.Map">
   		update store 
		set store_intro = #{store_intro}
		where mem_id = #{mem_id}
   	</update>
   	
   	<!-- 상점 프사 업뎃  -->
   	<update id="profileImgUpdate" parameterType="java.util.Map">
   		update store 
		set store_img = #{store_img}
		where mem_id = #{mem_id}
   	</update>
   	
   	<!-- 에코지수 판매 횟수  salesNum-->
   	<select id="salesNum" parameterType="String" resultType="int">
		select count(*)
		from purchase
		where seller_id = #{my_id}
   	</select>
   	
   	<!-- 에코지수 업데이트 -->
   	<update id="echoUpdate" parameterType="java.util.Map">
 		update store 
		set store_echo = #{store_echo}
		where mem_id = #{mem_id}
 	</update>
 	
	<!-- [상품] -->
	<!-- 해당 아이디의 상품 리스트 출력 -->
	<select id="storeProductList" parameterType="java.util.Map" resultType="product">
		select product_seq, mem_id, product_subject, product_content, product_img1, TO_CHAR(product_price, '999,999,999') as product_price, product_location, product_delivery_fee, product_manage, TO_CHAR(product_logtime,'YYYY-MM-DD') as product_logtime 
		from product 
		where mem_id = #{mem_id} 
		<choose>
			<when test="sortNum==0"> <!-- 최신순 정렬; 판매완료상품은 맨뒤로 -->
				order by decode(product_manage,3,1) desc, product_logtime desc
			</when> 
			<when test="sortNum==1"> <!-- 인기순  -->
				order by product_view desc
			</when> 
			<when test="sortNum==2"> <!-- 저가순 -->
				order by product_price 
			</when> 
			<when test="sortNum==3"> <!-- 고가순 -->
				order by product_price desc
			</when> 
			
		</choose>
	</select>
	
	<!-- 해당 아이디의  상품 총 개수 -->
	<select id="storeProductTotalA" parameterType="String" resultType="int">
   		select count(*) 
   		from product 
   		where mem_id = #{mem_id}
   	</select>
   	
	<!-- [상품후기] -->
	<!-- 후기 리스트 -->
 	<select id="storeReviewsList" parameterType="String" resultType="store.bean.ReviewDTO">
		select product_seq, store_nickname, store_img, review.mem_id, product_subject, review_content, review_score, review_date, review_seq
		from product
		join review using(product_seq)
		join store on(store.mem_id=review.mem_id) <!-- 후기 쓴 사람의 상점 정보 -->
		where product.mem_id = #{mem_id} <!-- 상점 주인의 mem_id -->
		order by review_seq desc
	</select>
 	
 	<!-- 총 리뷰 개수 -->
 	<select id="storeReviewTotalA" parameterType="String" resultType="int">
   		select count(*)
		from product
        join review using(product_seq)
        where product.mem_id = #{mem_id}
   	</select>
 	
 	<!-- [찜] -->
 	<!-- 리스트 출력 -->
 	<select id="storeFavoritesList" parameterType="java.util.Map" resultType="product">
		select product.mem_id,  <!-- 상품 올린 사람의 id -->
			   product_seq, 
			   cate_code, 
			   product_subject, 
			   product_content, 
			   product_img1, 
			   product_img2, 
			   product_img3, 
			   TO_CHAR(product_price, '999,999,999') as product_price, 
			   product_location, 
			   product_condition, 
			   product_delivery_fee, 
			   product_hashtag1, 
			   product_hashtag2, 
			   product_hashtag3, 
			   product_hashtag4, 
			   product_hashtag5, 
			   product_view, 
			   product_manage, 
			   TO_CHAR(product_logtime,'YYYY-MM-DD hh:mm') as product_logtime 
		from wish
		join product using(product_seq)
		where wish.mem_id = #{mem_id} <!-- 찜한 사람의 아이디 -->
		<choose>
			<when test="sortNum==0"> <!-- 최신순 정렬; 판매완료상품은 맨뒤로 -->
				order by decode(product_manage,3,1) desc, product_logtime desc
			</when> 
			<when test="sortNum==1"> <!-- 인기순  -->
				order by product_view desc
			</when> 
			<when test="sortNum==2"> <!-- 저가순 -->
				order by product_price 
			</when> 
			<when test="sortNum==3"> <!-- 고가순 -->
				order by product_price desc
			</when> 
			
		</choose>
	</select> 
	
	<!-- 해당 상점이 찜한 상품 수-->
	<select id="storeFavoritesTotalA" parameterType="String" resultType="int">
   		select count(*) from wish where mem_id = #{mem_id}
   	</select>
	
	<!-- 판매 완료된 상품 삭제 -->
 	<delete id="storeSoldOutDelete">
		delete 
		from wish
		where product_seq = (select product_seq 
                               from product 
                               join wish using(product_seq) 
                               where product_manage = 3)
	</delete>
	
	<!-- [내상품관리] -->
	<!-- 해당 아이디의 상품 리스트 출력 -->
	<select id="productManageList" parameterType="String" resultType="product">
		select product_seq, mem_id, cate_code, product_subject, product_img1, TO_CHAR(product_price, '999,999,999') as product_price, product_condition, product_manage, TO_CHAR(product_logtime,'YYYY-MM-DD HH24:MI') as product_logtime
		from (select  rownum rn, tt.* from 
		(select * from product where mem_id = #{mem_id} and product_manage
		<!-- 상품상태별 정렬  -->
			<choose>
				<when test="product_manage!=0">
					= #{product_manage}
				</when> 
				<!-- 전체 -->
				<when test="product_manage==0">
					between 1 and 3
				</when>
			</choose>
		order by decode(product_manage,3,1) desc, product_logtime desc)tt) 
		where rn between #{startNum} and #{endNum}
	</select>
	
	<!-- 각 상품의 찜(된) 개수 -->
 	<select id="favoritesOfProd" parameterType="java.util.Map" resultType="int">
   		select count(*)
		from product
		join wish using(product_seq)
		where product.mem_id = #{mem_id} and product_seq = #{product_seq}
   	</select>
   	
   	<!-- 상품 검색  리스트 -->
   	<select id="productManageSearch" parameterType="java.util.Map" resultType="product">
		select product_seq, mem_id, cate_code, product_subject, product_img1, TO_CHAR(product_price, '999,999,999') as product_price, product_condition, product_manage, TO_CHAR(product_logtime,'YYYY-MM-DD HH24:MI') as product_logtime
		from (select  rownum rn, tt.* from 
		(select * from product
		where mem_id = #{mem_id} and product_subject like '%'||#{searchKeyword}||'%' and product_manage
		<!-- 상품상태별 정렬  -->
		<choose>
			<when test="product_manage!=0">
				= #{product_manage}
			</when> 
			<!-- 전체 -->
			<when test="product_manage==0">
				between 1 and 3
			</when>
		</choose>
		order by decode(product_manage,3,1) desc, product_logtime desc)tt) 
		where rn between #{startNum} and #{endNum}
	</select>
	
   	<!-- 판매상태 변경 -->
   	<update id="prodManageUpdate" parameterType="java.util.Map">
   		update product
		set product_manage = #{product_manage}
		where mem_id = #{mem_id} and product_seq = #{product_seq} 
   	</update>
   	
   	<!-- [내상품관리] 판매상태별 물품 총 개수 -->
   	<!-- 해당 아이디의  상품 총 개수 -->
	<select id="prodManageTotalA" parameterType="java.util.Map" resultType="int">
   		select count(*) from product where mem_id = #{mem_id} and product_manage
		<!-- 상품상태별 정렬  -->
		<choose>
			<when test="product_manage!=0">
				= #{product_manage}
			</when> 
			<!-- 전체 -->
			<when test="product_manage==0">
				between 1 and 3
			</when>
		</choose>
   	</select>
   	
   	<!-- 검색 상품 총개수 -->
	<select id="productSearchTot" parameterType="java.util.Map" resultType="int">
   		select count(*)
		from product
		where mem_id = #{mem_id} and product_subject like '%'||#{searchKeyword}||'%' and product_manage
		<!-- 상품상태별 정렬  -->
		<choose>
			<when test="product_manage!=0">
				= #{product_manage}
			</when> 
			<!-- 전체 -->
			<when test="product_manage==0">
				between 1 and 3
			</when>
		</choose>
   	</select>
   	
   	<!-- UP하기 사용 -->
   	<update id="productUp" parameterType="java.util.Map">
   		update product 
		set product_logtime = sysdate
		where mem_id = #{mem_id} and product_seq = #{product_seq}
   	</update>
   	
   	<!-- 상품 삭제 -->
   	<delete id="productDlt" parameterType="java.util.Map">
		delete 
		from product
		where mem_id = #{mem_id} and product_seq=#{product_seq}
	</delete>
	
	<!-- 상품 한 개의 정보 -->
	<select id="existProd" parameterType="java.util.Map" resultType="product">
   		select*
   		from product 
   		where mem_id = #{mem_id} and product_seq = #{product_seq}
   	</select>
   	
   	<!-- 구매내역 리스트 -->
   	<select id="purchaseList" parameterType="String" resultType="purchase">
		select store_nickname, my_id, product_seq, product_img1, product_subject, TO_CHAR(product_price, '999,999,999') as product_price, TO_CHAR(product_logtime,'YYYY-MM-DD HH24:MI') as purchase_logtime
		from (select  rownum rn, tt.* from 
				(select * 
				from purchase 
				join store on(seller_id=mem_id)
				join product using(product_seq)
				where my_id = #{my_id} 
				order by purchase_logtime desc)tt) 
		where rn between #{startNum} and #{endNum}
	</select>
	
	<!-- 구매내역 총 개수 -->
	<select id="purchaseTotalA" parameterType="String" resultType="int">
		select count(*)
		from purchase
		where my_id = #{my_id}
   	</select>
   	
   	<!-- 상점 기본 정보 -->
   	<select id="storeInfo" parameterType="String" resultType="store">
		select*
		from store 
		where mem_id = #{mem_id}
	</select>
   	
   	<!-- 구매 내역 존재(1) 여부 purchaseExist -->
  	<select id="purchaseExist" parameterType="java.util.Map" resultType="store.bean.PurchaseExistDTO">
		select*
		from purchase
		where my_id = #{my_id} and seller_id = #{seller_id}
	</select>
	
	<!-- 상점주인 - 채팅방 리스트 조회  -->
	<select id="getChatList" parameterType="String" resultType="chat.bean.ChatListDTO">
		select mem_id, other_store_nickname, other_store_img, chat_logtime
		from chatlist 
		where mem_id = #{mem_id} 
		order by chat_logtime desc
	</select>
	
	<!-- 구매내역 추가  -->
	<insert id="purchaseInsert" parameterType="java.util.Map">
		insert into purchase(my_id, seller_id, product_seq, purchase_logtime)
		values(#{pur_nick}, #{seller_id}, #{product_seq}, sysdate)
	</insert>
	
	<!-- 닉으로 상대방 상점 아이디 구하기 -->
	<select id="getStoreNick" parameterType="String" resultType="String">
		select mem_id
		from store
		where store_nickname = #{other_store_nickname}
	</select>
	
	<!-- 거래한 상품 선택 -->
	<select id="purchaseListSelect" parameterType="String" resultType="product">
		select product_seq, product_subject, product_img1, product_price
		from product
		where product_seq = #{product_seq}
		order by product_seq desc
	</select>
	
	<!-- 리뷰 등록  -->
	<insert id="reviewRegister" parameterType="java.util.Map">
		insert into review
		values(#{product_seq}, #{mem_id}, #{review_content}, #{review_score}, sysdate, seq_review.NEXTVAL)
	</insert>
	
	<!-- 찜 삭제 -->
	<delete id="favoritesDelete" parameterType="java.util.Map">
		delete 
		from wish 
		where mem_id = #{mem_id} and product_seq=#{product_seq}
	</delete>
	
	<!-- 구매내역 조회(2) 상품번호까지 -->
	<select id="purchaseCompleted" parameterType="java.util.Map" resultType="store.bean.PurchaseExistDTO">
		select*
		from purchase
		where my_id = #{pur_nick} and seller_id=#{seller_id} and product_seq = #{product_seq} 
	</select>
	
	<!-- 총 리뷰 평점 합 계산 -->
	<select id="storeScoreSum" parameterType="String" resultType="int">
		select sum(review_score)
		from review
		where mem_id = #{mem_id}
	</select>
</mapper>

















